<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>分布式存储 on 多颗糖</title>
    <link>https://tangwz.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/</link>
    <description>Recent content in 分布式存储 on 多颗糖</description>
    <image>
      <url>https://tangwz.com/</url>
      <link>https://tangwz.com/</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://tangwz.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leveldb 基本介绍和使用指南</title>
      <link>https://tangwz.com/post/leveldb-index/</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tangwz.com/post/leveldb-index/</guid>
      <description>leveldb 是一个持久化的 key/value 存储，key 和 value 都是任意的字节数组(byte arrays)，并且在存储时，key 值根据用户指定的 comparator 函数进行排序。
作者是大名鼎鼎的 Jeff Dean 和 Sanjay Ghemawat.
基本介绍 特性  keys 和 values 是任意的字节数组。 数据按 key 值排序存储。 调用者可以提供一个自定义的比较函数来重写排序顺序。 提供基本的 Put(key,value)，Get(key)，Delete(key) 操作。 多个更改可以在一个原子批处理中生效。 用户可以创建一个瞬时快照(snapshot)，以获得数据的一致性视图。 在数据上支持向前和向后迭代。 使用 Snappy 压缩库对数据进行自动压缩 与外部交互的操作都被抽象成了接口(如文件系统操作等)，因此用户可以根据接口自定义的操作系统交互。  局限性  这不是一个 SQL 数据库，它没有关系数据模型，不支持 SQL 查询，也不支持索引。 同时只能有一个进程(可能是具有多线程的进程)访问一个特定的数据库。 该程序库没有内置的 client-server 支持，有需要的用户必须自己封装。  性能 下面是运行 db_bench 程序的性能报告。结果有一些噪声(noisy)，但足以得到一个大概的性能估计。
配置 我们使用的是一个有一百万个条目的数据库，其中每个条目的 key 是 16 字节，value 是 100 字节，value 压缩后大约是原始大小的一半，测试配置如下:
LevelDB: version 1.1 Date: Sun May 1 12:11:26 2011 CPU: 4 x Intel(R) Core(TM)2 Quad CPU Q6600 @ 2.</description>
      <content:encoded><![CDATA[<p>leveldb 是一个持久化的 key/value 存储，key 和 value 都是任意的字节数组(byte arrays)，并且在存储时，key 值根据用户指定的 comparator 函数进行排序。</p>
<p>作者是大名鼎鼎的 Jeff Dean 和 Sanjay Ghemawat.</p>
<h1 id="基本介绍">基本介绍</h1>
<h2 id="特性">特性</h2>
<ul>
<li>keys 和 values 是任意的字节数组。</li>
<li>数据按 key 值排序存储。</li>
<li>调用者可以提供一个自定义的比较函数来重写排序顺序。</li>
<li>提供基本的 <code>Put(key,value)</code>，<code>Get(key)</code>，<code>Delete(key)</code> 操作。</li>
<li>多个更改可以在一个原子批处理中生效。</li>
<li>用户可以创建一个瞬时快照(snapshot)，以获得数据的一致性视图。</li>
<li>在数据上支持向前和向后迭代。</li>
<li>使用 Snappy 压缩库对数据进行自动压缩</li>
<li>与外部交互的操作都被抽象成了接口(如文件系统操作等)，因此用户可以根据接口自定义的操作系统交互。</li>
</ul>
<h2 id="局限性">局限性</h2>
<ul>
<li>这不是一个 SQL 数据库，它没有关系数据模型，不支持 SQL 查询，也不支持索引。</li>
<li>同时只能有一个进程(可能是具有多线程的进程)访问一个特定的数据库。</li>
<li>该程序库没有内置的 client-server 支持，有需要的用户必须自己封装。</li>
</ul>
<h2 id="性能">性能</h2>
<p>下面是运行 db_bench 程序的性能报告。结果有一些噪声(noisy)，但足以得到一个大概的性能估计。</p>
<h3 id="配置">配置</h3>
<p>我们使用的是一个有一百万个条目的数据库，其中每个条目的 key 是 16 字节，value 是 100 字节，value 压缩后大约是原始大小的一半，测试配置如下:</p>
<pre tabindex="0"><code>LevelDB:    version 1.1
Date:       Sun May  1 12:11:26 2011
CPU:        4 x Intel(R) Core(TM)2 Quad CPU    Q6600  @ 2.40GHz
CPUCache:   4096 KB
Keys:       16 bytes each
Values:     100 bytes each (50 bytes after compression)
Entries:    1000000
Raw Size:   110.6 MB (estimated)
File Size:  62.9 MB (estimated)
</code></pre><p>具体 benchmark 源码见：https://github.com/google/leveldb/blob/master/benchmarks/db_bench.cc</p>
<h3 id="写性能">写性能</h3>
<p>“fill” 基准测试创建了一个全新的数据库，以顺序(下面的 “fillseq”)或者随机(下面的 “fillrandom”)方式写入。</p>
<p>“fillsync” 基准测试每次写操作都将数据从操作系统刷到磁盘; 其它的操作会将数据保存在系统中一段时间。</p>
<p>“overwrite” 基准测试做随机写，会更新数据库中已有的 key。</p>
<pre tabindex="0"><code>fillseq      :       1.765 micros/op;   62.7 MB/s
fillsync     :     268.409 micros/op;    0.4 MB/s (10000 ops)
fillrandom   :       2.460 micros/op;   45.0 MB/s
overwrite    :       2.380 micros/op;   46.5 MB/s
</code></pre><p>上述每个 “op” 对应一个 key/value 对的写操作。即，一个随机写基准测试<strong>每秒约四十万次</strong>写操作(1,000,000/2.46)。</p>
<p>每个 “fillsync” 操作耗时(大约 0.3 毫秒)少于一次磁盘搜索(大约 10 毫秒)。我们怀疑这是因为磁盘本身将更新操作缓存到了内存，并在数据落盘之前返回响应。这可能是安全的，也可能是不安全的，取决于硬盘是否有足够的电力在断电时保存其内存。</p>
<h3 id="读性能">读性能</h3>
<p>我们列出了正向顺序读、反向顺序读以及随机查询的性能。注意，基础测试创建的数据库很小，因此该性能报告描述的是 leveldb 的全部数据集能放入到内存的场景，如果数据不在操作系统缓存中，读取的性能消耗主要在于一到两次的磁盘搜索，写性能基本不会受数据集是否能放入内存的影响。</p>
<pre tabindex="0"><code>readrandom  : 16.677 micros/op;  (approximately 60,000 reads per second)
readseq     :  0.476 micros/op;  232.3 MB/s
readreverse :  0.724 micros/op;  152.9 MB/s
</code></pre><p>leveldb 会在后台 compact 其底层存储的数据来改善读性能。上面列出的结果是在大量随机写操作后得出的，经过 compact 后的性能指标（通常是指动出发的）会更好：</p>
<pre tabindex="0"><code>readrandom  : 11.602 micros/op;  (approximately 85,000 reads per second)
readseq     :  0.423 micros/op;  261.8 MB/s
readreverse :  0.663 micros/op;  166.9 MB/s
</code></pre><p>读操作消耗高的成本一部分来自于重复解压从磁盘读取的数据库，如果我们能够提供足够的缓存给 leveldb 来将解压后的数据保存在内存中，读性能会进一步改善：</p>
<pre tabindex="0"><code>readrandom  : 9.775 micros/op;  (approximately 100,000 reads per second before compaction)
readrandom  : 5.215 micros/op;  (approximately 190,000 reads per second after compaction)
</code></pre><h2 id="编译">编译</h2>
<p>项目支持 Cmake 开箱即用。编译非常简单：</p>
<pre tabindex="0"><code>git clone --recurse-submodules https://github.com/google/leveldb.git
mkdir -p build &amp;&amp; cd build
cmake -DCMAKE_BUILD_TYPE=Release .. &amp;&amp; cmake --build .
</code></pre><h2 id="头文件介绍">头文件介绍</h2>
<p>leveldb 对外暴露的接口都在 <code>include/*.h</code> 中，用户不应该依赖任何其它目录下的头文件，这些内部 API 可能会在没有警告的情况下被改变。</p>
<ul>
<li><code>include/leveldb/db.h</code>：主要的 DB 接口，从这开始。</li>
<li><code>include/leveldb/options.h</code>： 控制数据库的行为，也控制当个读和写的行为。</li>
<li><code>include/leveldb/comparator.h</code>： 比较函数的抽象。如果你只想对 key 逐字节比较，可以直接使用默认的比较器。如果你想要自定义排序（例如处理不同的字符编码、解码等），可以实现自己的比较器。</li>
<li><code>include/leveldb/iterator.h</code>：迭代数据的接口，你可以从一个 DB 对象获取到一个迭代器。</li>
<li><code>include/leveldb/write_batch.h</code>：原子地将多个操作应用到数据库。</li>
<li><code>include/leveldb/slice.h</code>：类似 string，维护着指向字节数组的指针和对应的长度。</li>
<li><code>include/leveldb/status.h</code>：许多公共接口都会返回 <code>Status</code>，用于报告成功或各种错误。</li>
<li><code>include/leveldb/env.h</code>：操作系统环境的抽象，该接口的 posix 实现位于 <code>util/env_posix.cc</code> 中.</li>
<li><code>include/leveldb/table.h, include/leveldb/table_builder.h</code>：底层的模块，大多数用户可能不会直接用到。</li>
</ul>
<h1 id="使用">使用</h1>
<p>编译以后我们可以使用 cmake 来小试牛刀，首先在 leveldb 目录创建文件夹 <code>app/</code> 来单独存放我们的练习文件，然后创建一个文件例如：<code>main.cc</code>，接着我们修改 <code>CMakeLists.txt</code> 文件，增加一行：</p>
<pre tabindex="0"><code>  347   if(NOT BUILD_SHARED_LIBS)
+ 348     leveldb_test(&quot;app/main.cc&quot;)
  349     leveldb_test(&quot;db/autocompact_test.cc&quot;)
</code></pre><p>编写完代码后，只需回到 <code>build/</code> 目录执行：</p>
<pre tabindex="0"><code>cmake .. &amp;&amp; cmake --build .
</code></pre><p>即可编译出 <code>main</code> 可执行文件。</p>
<h2 id="打开一个数据库">打开一个数据库</h2>
<p>leveldb 数据库都有一个名字，该名字对应文件系统上的一个目录，该数据库内容全都存在该目录下。下面的例子显示了如何打开一个数据库，必要时创建数据库：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;cassert&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;leveldb/db.h&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
    leveldb<span style="color:#f92672">::</span>DB<span style="color:#f92672">*</span> db;
    leveldb<span style="color:#f92672">::</span>Options options;
    options.create_if_missing <span style="color:#f92672">=</span> true;
    leveldb<span style="color:#f92672">::</span>Status status <span style="color:#f92672">=</span> leveldb<span style="color:#f92672">::</span>DB<span style="color:#f92672">::</span>Open(options, <span style="color:#e6db74">&#34;/tmp/testdb&#34;</span>, <span style="color:#f92672">&amp;</span>db);
    assert(status.ok());
}
</code></pre></div><p>如果你想在数据库已存在的时候触发一个异常，将下面这行配置加到 <code>leveldb::DB::Open</code> 调用之前：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">options.error_if_exists <span style="color:#f92672">=</span> true;
</code></pre></div><h2 id="status">Status</h2>
<p>你也许注意到上面的 <code>leveldb::Status</code> 返回类型，leveldb 中大部分方法在遇到错误的时候会返回该类型的值，你可以检查它是否 ok，然后打印相关的错误信息：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">leveldb<span style="color:#f92672">::</span>Status s <span style="color:#f92672">=</span> ...;
<span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>s.ok()) cerr <span style="color:#f92672">&lt;&lt;</span> s.ToString() <span style="color:#f92672">&lt;&lt;</span> endl;
</code></pre></div><p><em>尝试输出数据库已存在的错误信息吧！</em></p>
<h2 id="关闭数据库">关闭数据库</h2>
<p>当数据库不再使用的时候，像下面这样直接删除数据库对象就可以了：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">delete</span> db;
</code></pre></div><p>是不是很简单？后面我们具体源码分析时会看到，<code>DB</code> 类是基于 RAII 实现的，在 delete 时会触发析构函数自动清理。</p>
<h2 id="数据库读写">数据库读写</h2>
<p>leveldb 提供了 <code>Put</code>、<code>Delete</code> 和 <code>Get</code> 方法来修改/查询数据库，下面的代码展示了将 key1 对应的 value 移动到 key2 下。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">std<span style="color:#f92672">::</span>string value;
leveldb<span style="color:#f92672">::</span>Status s <span style="color:#f92672">=</span> db<span style="color:#f92672">-&gt;</span>Get(leveldb<span style="color:#f92672">::</span>ReadOptions(), key1, <span style="color:#f92672">&amp;</span>value);
<span style="color:#66d9ef">if</span> (s.ok()) s <span style="color:#f92672">=</span> db<span style="color:#f92672">-&gt;</span>Put(leveldb<span style="color:#f92672">::</span>WriteOptions(), key2, value);
<span style="color:#66d9ef">if</span> (s.ok()) s <span style="color:#f92672">=</span> db<span style="color:#f92672">-&gt;</span>Delete(leveldb<span style="color:#f92672">::</span>WriteOptions(), key1);
</code></pre></div><h2 id="原子更新">原子更新</h2>
<p>需要注意的是，在上一小节中如果进程在 <code>Put</code> key2 后 <code>Delete</code> key1 之前挂了，那么同样的 value 将被存储在多个 key 下。可以通过使用 <code>WriteBatch</code> 原子地应用一组操作来避免类似的问题。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;leveldb/write_batch.h&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>...
std<span style="color:#f92672">::</span>string value;
leveldb<span style="color:#f92672">::</span>Status s <span style="color:#f92672">=</span> db<span style="color:#f92672">-&gt;</span>Get(leveldb<span style="color:#f92672">::</span>ReadOptions(), key1, <span style="color:#f92672">&amp;</span>value);
<span style="color:#66d9ef">if</span> (s.ok()) {
  leveldb<span style="color:#f92672">::</span>WriteBatch batch;
  batch.Delete(key1);
  batch.Put(key2, value);
  s <span style="color:#f92672">=</span> db<span style="color:#f92672">-&gt;</span>Write(leveldb<span style="color:#f92672">::</span>WriteOptions(), <span style="color:#f92672">&amp;</span>batch);
}
</code></pre></div><p><code>WriteBatch</code> 保存着一系列将被应用到数据库的操作，这些操作会按照添加的顺序依次被执行。注意，我们先执行 <code>Delete</code> 后执行 <code>Put</code>，这样如果 key1 和 key2 一样的情况下我们也不会错误地丢失数据。</p>
<p>除了原子性，<code>WriteBatch</code> 也能加速更新过程，因为可以把一大批独立的操作添加到同一个 batch 中然后一次性执行。</p>
<h2 id="同步写操作">同步写操作</h2>
<p>默认情况下，leveldb 每个写操作都是异步的：进程把要写的内容丢给操作系统后立即返回，从操作系统内存到底层持久化存储的传输是异步进行的。</p>
<p>可以为某个特定的写操作打开同步标识：<code>write_options.sync = true</code>，以等到数据真正被记录到持久化存储后再返回（在 Posix 系统上，这是通过在写操作返回前调用 <code>fsync(...)</code> 或 <code>fdatasync(...)</code> 或 <code>msync(..., MS_SYNC)</code> 来实现的）。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">leveldb<span style="color:#f92672">::</span>WriteOptions write_options;
write_options.sync <span style="color:#f92672">=</span> true;
db<span style="color:#f92672">-&gt;</span>Put(write_options, ...);
</code></pre></div><p>**异步写通常比同步写快 1000 倍。**异步写的缺点是，一旦机器崩溃可能会导致最后几个更新操作丢失。注意，仅仅是写进程崩溃（而非机器重启）不会造成任何损失，因为哪怕 sync 标识为 false，在进程退出之前，写操作也已经从进程内存推到了操作系统。</p>
<p>异步写通常可以安全使用。比如你要将大量的数据写入数据库，如果丢失了最后几个更新操作，也可以重做整个写过程。如果数据量非常大，一个优化点是采用混合方案，每进行 N 个异步写操作则进行一次同步写，如果期间发生了崩溃，重启从上一个成功的同步写操作开始即可。（同步写操作可以同时更新一个标识，描述崩溃时重启的位置）</p>
<p><code>WriteBatch</code> 可以作为异步写操作的替代品，多个更新操作可以放到同一个 <code>WriteBatch</code> 中然后通过一次同步写(即 <code>write_options.sync = true</code>)一起落盘。</p>
<h2 id="并发">并发</h2>
<p>一个数据库同时只能被一个进程打开。leveldb 会从操作系统获取一把锁来防止多进程同时打开同一个数据库。在单个进程中，同一个 leveldb::DB 对象可以被多个并发线程安全地使用，也就是说，不同的线程可以在不需要任何外部同步原语的情况下，写入、获取迭代器或者调用 <code>Get</code>（leveldb 实现会确保所需的同步）。但是其它对象，比如 <code>Iterator</code> 或者 <code>WriteBatch</code> 需要外部自己提供同步保证，如果两个线程共享此类对象，需要使用自己的锁进行互斥访问。具体见对应的头文件。</p>
<h2 id="迭代数据库">迭代数据库</h2>
<p>下面的用例展示了如何打印数据库中全部的 (key, value) 对。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">leveldb<span style="color:#f92672">::</span>Iterator<span style="color:#f92672">*</span> it <span style="color:#f92672">=</span> db<span style="color:#f92672">-&gt;</span>NewIterator(leveldb<span style="color:#f92672">::</span>ReadOptions());
<span style="color:#66d9ef">for</span> (it<span style="color:#f92672">-&gt;</span>SeekToFirst(); it<span style="color:#f92672">-&gt;</span>Valid(); it<span style="color:#f92672">-&gt;</span>Next()) {
  cout <span style="color:#f92672">&lt;&lt;</span> it<span style="color:#f92672">-&gt;</span>key().ToString() <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34;: &#34;</span>  <span style="color:#f92672">&lt;&lt;</span> it<span style="color:#f92672">-&gt;</span>value().ToString() <span style="color:#f92672">&lt;&lt;</span> endl;
}
assert(it<span style="color:#f92672">-&gt;</span>status().ok());  <span style="color:#75715e">// Check for any errors found during the scan
</span><span style="color:#75715e"></span><span style="color:#66d9ef">delete</span> it;
</code></pre></div><p>下面的用例展示了如何打印 <code>[start, limit)</code> 范围内的数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">for</span> (it<span style="color:#f92672">-&gt;</span>Seek(start);
   it<span style="color:#f92672">-&gt;</span>Valid() <span style="color:#f92672">&amp;&amp;</span> it<span style="color:#f92672">-&gt;</span>key().ToString() <span style="color:#f92672">&lt;</span> limit;
   it<span style="color:#f92672">-&gt;</span>Next()) {
  ...
}
</code></pre></div><p>当然你也可以反向遍历（注意，反向遍历可能要比正向遍历慢一些，具体见前面的读性能基准测试）：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">for</span> (it<span style="color:#f92672">-&gt;</span>SeekToLast(); it<span style="color:#f92672">-&gt;</span>Valid(); it<span style="color:#f92672">-&gt;</span>Prev()) {
  ...
}
</code></pre></div><h2 id="快照">快照</h2>
<p>快照提供了针对整个 KV 存储的一致性只读视图（consistent read-only views）。ReadOptions::snapshot 不为 null 表示读操作应该作用在 DB 的某个特定版本上；若为 null，则读操作将会作用在当前版本的一个隐式的快照上。</p>
<p>快照通过调用 <code>DB::GetSnapshot()</code> 方法创建：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">leveldb<span style="color:#f92672">::</span>ReadOptions options;
options.snapshot <span style="color:#f92672">=</span> db<span style="color:#f92672">-&gt;</span>GetSnapshot();
... apply some updates to db ...
leveldb<span style="color:#f92672">::</span>Iterator<span style="color:#f92672">*</span> iter <span style="color:#f92672">=</span> db<span style="color:#f92672">-&gt;</span>NewIterator(options);
... read <span style="color:#66d9ef">using</span> iter to view the state when the snapshot was created ...
<span style="color:#66d9ef">delete</span> iter;
db<span style="color:#f92672">-&gt;</span>ReleaseSnapshot(options.snapshot);
</code></pre></div><p>注意，当一个快照不再使用的时候，应该通过 <code>DB::ReleaseSnapshot</code> 接口进行释放。</p>
<h2 id="slice">Slice</h2>
<p><code>it-&gt;key()</code> 和 <code>it-&gt;value()</code> 调用返回的值是 <code>leveldb::Slice</code> 类型。熟悉 Go 的同学应该对 Slice 不陌生。Slice 是一个简单的数据结构，包含一个长度和一个指向外部字节数组的指针，返回一个 Slice 比返回一个 <code>std::string</code> 更高效，因为不需要隐式地拷贝大量的 keys 和 values。另外，leveldb 方法不返回 <code>\0</code> 截止符结尾的 C 风格字符串，因为 leveldb 的 keys 和 values 允许包含 <code>\0</code> 字节。</p>
<p>C++ 风格的 string 和 C 风格的空字符结尾的字符串很容易转换为一个 Slice：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">leveldb<span style="color:#f92672">::</span>Slice s1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;hello&#34;</span>;

std<span style="color:#f92672">::</span>string str(<span style="color:#e6db74">&#34;world&#34;</span>);
leveldb<span style="color:#f92672">::</span>Slice s2 <span style="color:#f92672">=</span> str;
</code></pre></div><p>一个 Slice 也很容易转换回 C++ 风格的字符串：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">std<span style="color:#f92672">::</span>string str <span style="color:#f92672">=</span> s1.ToString();
assert(str <span style="color:#f92672">==</span> std<span style="color:#f92672">::</span>string(<span style="color:#e6db74">&#34;hello&#34;</span>));
</code></pre></div><p>在使用 Slice 时要小心，<strong>要由调用者来确保 Slice 指向的外部字节数组有效</strong>。例如，下面的代码就有 bug ：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">leveldb<span style="color:#f92672">::</span>Slice slice;
<span style="color:#66d9ef">if</span> (...) {
  std<span style="color:#f92672">::</span>string str <span style="color:#f92672">=</span> ...;
  slice <span style="color:#f92672">=</span> str;
}
Use(slice);
</code></pre></div><p>当 if 语句结束的时候，str 将会被销毁，Slice 的指向也随之消失，后面再用就会出问题。</p>
<h2 id="比较器comparator">比较器（Comparator）</h2>
<p>前面的例子中用的都是默认的比较函数，即逐字节按字典序比较。你可以自定义比较函数，然后在打开数据库的时候传入，只需要继承 <code>leveldb::Comparator</code> 然后定义相关逻辑即可，下面是一个例子：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TwoPartComparator</span> <span style="color:#f92672">:</span> <span style="color:#66d9ef">public</span> leveldb<span style="color:#f92672">::</span>Comparator {
 <span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
  <span style="color:#75715e">// Three-way comparison function:
</span><span style="color:#75715e"></span>  <span style="color:#75715e">//   if a &lt; b: negative result
</span><span style="color:#75715e"></span>  <span style="color:#75715e">//   if a &gt; b: positive result
</span><span style="color:#75715e"></span>  <span style="color:#75715e">//   else: zero result
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">int</span> Compare(<span style="color:#66d9ef">const</span> leveldb<span style="color:#f92672">::</span>Slice<span style="color:#f92672">&amp;</span> a, <span style="color:#66d9ef">const</span> leveldb<span style="color:#f92672">::</span>Slice<span style="color:#f92672">&amp;</span> b) <span style="color:#66d9ef">const</span> {
    <span style="color:#66d9ef">int</span> a1, a2, b1, b2;
    ParseKey(a, <span style="color:#f92672">&amp;</span>a1, <span style="color:#f92672">&amp;</span>a2);
    ParseKey(b, <span style="color:#f92672">&amp;</span>b1, <span style="color:#f92672">&amp;</span>b2);
    <span style="color:#66d9ef">if</span> (a1 <span style="color:#f92672">&lt;</span> b1) <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
    <span style="color:#66d9ef">if</span> (a1 <span style="color:#f92672">&gt;</span> b1) <span style="color:#66d9ef">return</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;
    <span style="color:#66d9ef">if</span> (a2 <span style="color:#f92672">&lt;</span> b2) <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;
    <span style="color:#66d9ef">if</span> (a2 <span style="color:#f92672">&gt;</span> b2) <span style="color:#66d9ef">return</span> <span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>;
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
  }

  <span style="color:#75715e">// Ignore the following methods for now:
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> <span style="color:#a6e22e">Name</span>() <span style="color:#66d9ef">const</span> { <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;TwoPartComparator&#34;</span>; }
  <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">FindShortestSeparator</span>(std<span style="color:#f92672">::</span>string<span style="color:#f92672">*</span>, <span style="color:#66d9ef">const</span> leveldb<span style="color:#f92672">::</span>Slice<span style="color:#f92672">&amp;</span>) <span style="color:#66d9ef">const</span> {}
  <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">FindShortSuccessor</span>(std<span style="color:#f92672">::</span>string<span style="color:#f92672">*</span>) <span style="color:#66d9ef">const</span> {}
};
</code></pre></div><p>在打开数据库的时候，传入上面定义的比较器：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">// 实例化比较器
</span><span style="color:#75715e"></span>TwoPartComparator cmp;
leveldb<span style="color:#f92672">::</span>DB<span style="color:#f92672">*</span> db;
leveldb<span style="color:#f92672">::</span>Options options;
options.create_if_missing <span style="color:#f92672">=</span> true;
<span style="color:#75715e">// 将比较器赋值给 options.comparator
</span><span style="color:#75715e"></span>options.comparator <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>cmp;
<span style="color:#75715e">// 打开数据库
</span><span style="color:#75715e"></span>leveldb<span style="color:#f92672">::</span>Status status <span style="color:#f92672">=</span> leveldb<span style="color:#f92672">::</span>DB<span style="color:#f92672">::</span>Open(options, <span style="color:#e6db74">&#34;/tmp/testdb&#34;</span>, <span style="color:#f92672">&amp;</span>db);
...
</code></pre></div><h3 id="向后兼容性">向后兼容性</h3>
<p>比较器 <code>Name()</code> 方法返回的结果在创建数据库时会被绑定到数据库上，后续每次打开都会进行检查，如果名称改了，对 <code>leveldb::DB::Open</code> 的调用就会失败。因此，当且仅当在新的 key 格式和比较函数与已有的数据库不兼容而且已有数据不再被需要的时候再修改比较器名称。总而言之，一个数据库只能对应一个比较器，而且比较器由名字唯一确定，一旦修改名称或比较器逻辑，数据库的操作逻辑统统会出错，毕竟 leveldb 是一个有序的 KV 存储。</p>
<p>如果非要修改比较逻辑呢？你可以根据预先规划一点一点的演进你的 key 格式，注意，事先的演进规划非常重要。比如，你可以在每个 key 的结尾存储一个版本号（大多数场景，一个字节足矣），当你想要切换到新的 key 格式的时候（比如上面的例子 <code>TwoPartComparator</code> 处理的 keys 中），那么需要做的是：</p>
<ol>
<li>保持相同的比较器名称</li>
<li>递增新 keys 的版本号</li>
<li>修改比较器函数以让其使用版本号来决定如何进行排序</li>
</ol>
<h2 id="性能调优">性能调优</h2>
<p>通过修改 <code>include/leveldb/options.h</code> 中定义的类型的默认值来对 leveldb 的性能进行调优。</p>
<h3 id="block-大小">Block 大小</h3>
<p>leveldb 把相邻的 keys 组织在同一个 block 中(具体见后续文章针对 sstable 文件格式的描述)，block 是数据在内存和持久化存储传输之间的基本单位。默认的未压缩 block 大小大约为 4KB，经常批量扫描大量数据的应用可能希望把这个值调大，而针对数据只做“点读”的应用则可能希望这个值小一些。但是，没有证据表明该值小于 1KB 或者大于几个 MB 的时候性能会表现得更好。另外要注意的是，使用较大的 block size，压缩效率会更高效。</p>
<h3 id="压缩">压缩</h3>
<p>每个 block 在写入持久化存储之前都会被单独压缩。压缩默认是开启的，因为默认的压缩算法非常快，而且对于不可压缩的数据会自动关闭压缩功能，极少有场景会让用户想要完全关闭压缩功能，除非基准测试显示关闭压缩会显著改善性能。按照下面方式即可关闭压缩功能：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">leveldb<span style="color:#f92672">::</span>Options options;
options.compression <span style="color:#f92672">=</span> leveldb<span style="color:#f92672">::</span>kNoCompression;
... leveldb<span style="color:#f92672">::</span>DB<span style="color:#f92672">::</span>Open(options, name, ...) ....
</code></pre></div><h3 id="缓存">缓存</h3>
<p>数据库的内容存储在文件系统中的一组文件中，每个文件都存储了一系列压缩后的 blocks，如果 <code>options.block_cache</code> 是非 NULL，则用于缓存经常使用的已解压缩 block 内容。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;leveldb/cache.h&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
leveldb<span style="color:#f92672">::</span>Options options;
options.block_cache <span style="color:#f92672">=</span> leveldb<span style="color:#f92672">::</span>NewLRUCache(<span style="color:#ae81ff">100</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1048576</span>);  <span style="color:#75715e">// 100MB cache
</span><span style="color:#75715e"></span>leveldb<span style="color:#f92672">::</span>DB<span style="color:#f92672">*</span> db;
leveldb<span style="color:#f92672">::</span>DB<span style="color:#f92672">::</span>Open(options, name, <span style="color:#f92672">&amp;</span>db);
... use the db ...
<span style="color:#66d9ef">delete</span> db
<span style="color:#66d9ef">delete</span> options.block_cache;
</code></pre></div><p>注意 cache 保存的是未压缩的数据，因此应该根据应用程序所需的数据大小来设置它的大小。（已压缩数据的缓存工作交给操作系统的 buffer cache 或者用户自定义的 <code>Env</code> 实现去干。）</p>
<p>当执行一个大块数据读操作时，应用程序可能想要取消缓存功能，这样读进来的大块数据就不会导致当前 cache 中的大部分数据被置换出去，我们可以为它提供一个单独的 iterator 来达到该目的：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">leveldb<span style="color:#f92672">::</span>ReadOptions options;
options.fill_cache <span style="color:#f92672">=</span> false;
leveldb<span style="color:#f92672">::</span>Iterator<span style="color:#f92672">*</span> it <span style="color:#f92672">=</span> db<span style="color:#f92672">-&gt;</span>NewIterator(options);
<span style="color:#66d9ef">for</span> (it<span style="color:#f92672">-&gt;</span>SeekToFirst(); it<span style="color:#f92672">-&gt;</span>Valid(); it<span style="color:#f92672">-&gt;</span>Next()) {
  ...
}
</code></pre></div><h3 id="key-的布局">Key 的布局</h3>
<p>注意，磁盘传输和缓存的单位都是一个 block，相邻的 keys（已排序）总在同一个 block 中，因此应用可以通过把需要一起访问的 keys 放在一起，同时把不经常使用的 keys 放到一个独立的键空间区域来提升性能。</p>
<p>举个例子，假设我们正基于 leveldb 实现一个简单的文件系统。我们打算存储到这个文件系统的数据类型如下：</p>
<pre tabindex="0"><code>filename -&gt; permission-bits, length, list of file_block_ids
file_block_id -&gt; data
</code></pre><p>我们可以给上面表示 filename 的 key 增加一个字符前缀，例如 &lsquo;/'，然后给表示 file_block_id 的 key 增加另一个不同的前缀，例如 &lsquo;0&rsquo;，这样这些不同用途的 key 就具有了各自独立的键空间区域，扫描元数据的时候我们就不用读取和缓存大块文件内容数据了。</p>
<h3 id="过滤器">过滤器</h3>
<p>鉴于 leveldb 数据在磁盘上的组织形式，一次 <code>Get()</code> 调用可能涉及多次磁盘读操作，可配置的 FilterPolicy 机制可以用来大幅减少磁盘读次数。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">leveldb<span style="color:#f92672">::</span>Options options;
<span style="color:#75715e">// 设置启用基于布隆过滤器的过滤策略
</span><span style="color:#75715e"></span>options.filter_policy <span style="color:#f92672">=</span> NewBloomFilterPolicy(<span style="color:#ae81ff">10</span>);
leveldb<span style="color:#f92672">::</span>DB<span style="color:#f92672">*</span> db;
<span style="color:#75715e">// 用该设置打开数据库
</span><span style="color:#75715e"></span>leveldb<span style="color:#f92672">::</span>DB<span style="color:#f92672">::</span>Open(options, <span style="color:#e6db74">&#34;/tmp/testdb&#34;</span>, <span style="color:#f92672">&amp;</span>db);
... use the database ...
<span style="color:#66d9ef">delete</span> db;
<span style="color:#66d9ef">delete</span> options.filter_policy;
</code></pre></div><p>上述代码将一个基于布隆过滤器的过滤策略与数据库进行了关联，基于布隆过滤器的过滤方式依赖于如下事实，在内存中保存每个 key 的部分位（在上面例子中是 10 位，因为我们传给 <code>NewBloomFilterPolicy</code> 的参数是 10），这个过滤器将会使得 Get() 调用中非必须的磁盘读操作大约减少 100 倍，每个 key 用于过滤器的位数增加将会进一步减少读磁盘次数，当然也会占用更多内存空间。<strong>我们推荐数据集无法全部放入内存同时又存在大量随机读的应用设置一个过滤器策略。</strong></p>
<p>如果你在使用自定义的比较器，应该确保你在用的过滤器策略与你的比较器兼容。举个例子，如果一个比较器在比较 key 的时候忽略结尾的空格，那么 <code>NewBloomFilterPolicy</code> 一定不能与此比较器共存。相反，应用应该提供一个自定义的过滤器策略，而且它也应该忽略 key 的尾部空格，示例如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">CustomFilterPolicy</span> <span style="color:#f92672">:</span> <span style="color:#66d9ef">public</span> leveldb<span style="color:#f92672">::</span>FilterPolicy {
 <span style="color:#66d9ef">private</span><span style="color:#f92672">:</span>
  FilterPolicy<span style="color:#f92672">*</span> builtin_policy_;

 <span style="color:#66d9ef">public</span><span style="color:#f92672">:</span>
  CustomFilterPolicy() <span style="color:#f92672">:</span> builtin_policy_(NewBloomFilterPolicy(<span style="color:#ae81ff">10</span>)) {}
  <span style="color:#f92672">~</span>CustomFilterPolicy() { <span style="color:#66d9ef">delete</span> builtin_policy_; }

  <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> <span style="color:#a6e22e">Name</span>() <span style="color:#66d9ef">const</span> { <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;IgnoreTrailingSpacesFilter&#34;</span>; }

  <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">CreateFilter</span>(<span style="color:#66d9ef">const</span> Slice<span style="color:#f92672">*</span> keys, <span style="color:#66d9ef">int</span> n, std<span style="color:#f92672">::</span>string<span style="color:#f92672">*</span> dst) <span style="color:#66d9ef">const</span> {
    <span style="color:#75715e">// Use builtin bloom filter code after removing trailing spaces
</span><span style="color:#75715e"></span>    std<span style="color:#f92672">::</span>vector<span style="color:#f92672">&lt;</span>Slice<span style="color:#f92672">&gt;</span> trimmed(n);
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> n; i<span style="color:#f92672">++</span>) {
      trimmed[i] <span style="color:#f92672">=</span> RemoveTrailingSpaces(keys[i]);
    }
    <span style="color:#66d9ef">return</span> builtin_policy_<span style="color:#f92672">-&gt;</span>CreateFilter(<span style="color:#f92672">&amp;</span>trimmed[i], n, dst);
  }
};
</code></pre></div><p>当然也可以自己提供非基于布隆过滤器的过滤器策略，具体见 <code>leveldb/filter_policy.h</code>。</p>
<h2 id="校验和checksums">校验和（Checksums）</h2>
<p>leveldb 将校验和与它存储在文件系统中的所有数据进行关联，对于这些校验和，有两个独立的控制：</p>
<p><code>ReadOptions::verify_checksums</code> 可以设置为 true，以强制对所有从文件系统读取的数据进行校验。默认为 false，即，不会进行这样的校验。</p>
<p><code>Options::paranoid_checks</code> 在数据库打开之前设置为 true ，以使得数据库一旦检测到数据损毁立即报错。根据数据库损坏的部位，报错可能是在打开数据库后，也可能是在后续执行某个操作的时候。该配置默认是关闭状态，即，持久化存储部分损坏数据库也能继续使用。</p>
<p>如果数据库损坏了(当开启 Options::paranoid_checks 的时候可能就打不开了)，<code>leveldb::RepairDB()</code> 函数可以用于对尽可能多的数据进行修复。</p>
<h2 id="近似空间大小">近似空间大小</h2>
<p><code>GetApproximateSizes</code> 方法用于获取一个或多个键区间占据的文件系统近似大小(单位, 字节)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">leveldb<span style="color:#f92672">::</span>Range ranges[<span style="color:#ae81ff">2</span>];
ranges[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> leveldb<span style="color:#f92672">::</span>Range(<span style="color:#e6db74">&#34;a&#34;</span>, <span style="color:#e6db74">&#34;c&#34;</span>);
ranges[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> leveldb<span style="color:#f92672">::</span>Range(<span style="color:#e6db74">&#34;x&#34;</span>, <span style="color:#e6db74">&#34;z&#34;</span>);
<span style="color:#66d9ef">uint64_t</span> sizes[<span style="color:#ae81ff">2</span>];
db<span style="color:#f92672">-&gt;</span>GetApproximateSizes(ranges, <span style="color:#ae81ff">2</span>, sizes);
</code></pre></div><p>上述代码结果是，size[0] 保存 [a..c) 区间对应的文件系统大致字节数。size[1] 保存 [x..z) 键区间对应的文件系统大致字节数。</p>
<h2 id="环境变量">环境变量</h2>
<p>由 leveldb 发起的全部文件操作以及其它的操作系统调用最后都会被路由给一个 <code>leveldb::Env</code> 对象。用户也可以提供自己的 Env 实现以达到更好的控制。比如，如果应用程序想要针对 leveldb 的文件 IO 引入一个人工延迟以限制 leveldb 对同一个系统中其它应用的影响：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">// 定制自己的 Env 
</span><span style="color:#75715e"></span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SlowEnv</span> <span style="color:#f92672">:</span> <span style="color:#66d9ef">public</span> leveldb<span style="color:#f92672">::</span>Env {
  ... implementation of the Env interface ...
};

SlowEnv env;
leveldb<span style="color:#f92672">::</span>Options options;
<span style="color:#75715e">// 用定制的 Env 打开数据库
</span><span style="color:#75715e"></span>options.env <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>env;
Status s <span style="color:#f92672">=</span> leveldb<span style="color:#f92672">::</span>DB<span style="color:#f92672">::</span>Open(options, ...);
</code></pre></div><h2 id="可移植">可移植</h2>
<p>如果某个特定平台提供 <code>leveldb/port/port.h</code> 导出的类型/方法/函数实现，那么 leveldb 可以被移植到该平台上，更多细节见 <code>leveldb/port/port_example.h</code>。</p>
<p>另外，新平台可能还需要一个新的默认的 leveldb::Env 实现。具体可参考 <code>leveldb/util/env_posix.h</code> 实现。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>系统设计那些事儿：硬盘 I/O</title>
      <link>https://tangwz.com/post/disk/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tangwz.com/post/disk/</guid>
      <description>数据库系统总会涉及非易失性存储，我们需要知道一个典型的计算机系统是如何进行存储管理的。时至今日，虽然 SSD 已经成为很多数据库管理员的选择，但传统 HDD 还是有着广泛的应用，文件系统和存储引擎大部分设计和发展还是基于 HDD 的行为；过去数十年来，HDD 一直是计算机系统中持久存储的主要形式。
本文回顾硬盘的物理特性，硬盘的主要性能指标，以及操作是如何进行硬盘 I/O 性能优化的，最后参考开源系统来讨论如何根据硬盘特性进行系统设计。
硬盘的物理特性 硬盘（Hard Disk Drive，HDD，有时为了与固态硬盘相区分称“机械硬盘”）是计算机最基础的非易失性存储，它在平整的磁性表面存储和检索数据，数据通过离磁性表面很近的磁头由电磁流来改变极性的方式被写入到磁盘上。数据可以通过盘片被读取，原理是磁头经过盘片的上方时盘片本身的磁场导致读取线圈中电气信号改变1。
硬盘主要包括一至数片高速转动的盘片(platter)以及放在传动手臂上的读写磁头(read–write head)，每个盘片都有两面，都可记录信息，因此也会相对应每个盘片有 2 个磁头。物理结构如下图所示：
我们通常更关注硬盘内部的结构：
——图源自《数据库系统概念》
 磁道（Track）：当硬盘旋转时，磁头若保持在一个位置上，则每个磁头都会在磁盘表面划出一个圆形轨迹，这些圆形轨迹就叫做磁道； 柱面（Cylinder）：在有多个盘片构成的盘组中，由不同盘片的面，但处于同一半径圆的多个磁道组成的一个圆柱面； 扇区（Sector）：磁盘上的每个磁道被等分为若干个弧段，这些弧段便是硬盘的扇区（Sector）。硬盘的第一个扇区，叫做引导扇区；  硬盘性能的度量 硬盘常规的一次 I/O 需要 3 步，每一步都有相关的延迟，可以将 I/O 访问时间（access time）表示为 3 部分之和：
 寻道时间（seek time）：将读写磁头组合定位在访问块所在磁道的柱面上所需要的时间 旋转延迟（rotational latency）：等待访问块的第一个扇区旋转到磁头下的时间； 传输时间（transfer time）：完成数据传输需要的时间，取决于硬盘数据传输率；  为了更好理解寻道时间和旋转延迟，可以参考下图：
值得一提的是，硬盘的趋势是传输速率相当快，因为硬盘制造商擅长将更多位填塞到同一表面。但驱动器的机械方面与寻道相关（传动手臂速度和旋转速度），改善相当缓慢2。因此，为了摊销 I/O 成本，必须在寻道之间传输尽可能多的数据。
操作系统中的硬盘 就像进程是 CPU 的抽象、地址空间是内存的抽象一样，存储在操作系统的抽象是文件（目录也是一种文件）。
如果算上内核中的文件系统、驱动等，Linux 的存储架构大体如下：
一个具体的读流程3：
 系统调用 read（） 会触发相应的 VFS（Virtual Filesystem Switch）函数，传递参数有文件描述符和文件偏移量； VFS 确定请求的数据是否已经在内存缓存中；若数据不在内存中，内核需要通过块设备层从物理设备上读取数据； 通过通用块设备层（Generic Block Layer）在块设备上执行读操作，启动I/O 操作，传输请求的数据； 在通用块设备层之下是 I/O 调度（I/O Scheduler），根据内核的调度策略，将对应的 I/O 插入队列； 最后，块设备驱动（Block Device Driver）通过向磁盘控制器发送相应的命令，执行真正的数据传输；  我们从上到下来看一些关键的点。</description>
      <content:encoded><![CDATA[<p>数据库系统总会涉及非易失性存储，我们需要知道一个典型的计算机系统是如何进行存储管理的。时至今日，虽然 SSD 已经成为很多数据库管理员的选择，但传统 HDD 还是有着广泛的应用，文件系统和存储引擎大部分设计和发展还是基于 HDD 的行为；过去数十年来，HDD 一直是计算机系统中持久存储的主要形式。</p>
<p>本文回顾硬盘的物理特性，硬盘的主要性能指标，以及操作是如何进行硬盘 I/O 性能优化的，最后参考开源系统来讨论如何根据硬盘特性进行系统设计。</p>
<h2 id="硬盘的物理特性">硬盘的物理特性</h2>
<p>硬盘（Hard Disk Drive，HDD，有时为了与固态硬盘相区分称“机械硬盘”）是计算机最基础的<strong>非易失性存储</strong>，它在平整的磁性表面存储和检索数据，数据通过离磁性表面很近的磁头由电磁流来<strong>改变极性的方式</strong>被写入到磁盘上。数据可以通过盘片被读取，原理是磁头经过盘片的上方时盘片本身的磁场导致读取线圈中电气信号改变<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>。</p>
<p>硬盘主要包括一至数片高速转动的盘片(platter)以及放在传动手臂上的读写磁头(read–write head)，每个盘片都有两面，都可记录信息，因此也会相对应每个盘片有 2 个磁头。物理结构如下图所示：</p>
<p><img loading="lazy" src="/media/images/20201126-disk/disk.jpg" alt="硬盘的物理结构"  />
</p>
<p>我们通常更关注硬盘内部的结构：</p>
<p><img loading="lazy" src="/media/images/20201126-disk/cylinder.jpg" alt="数据库系统概念"  />
</p>
<p><em>——图源自《数据库系统概念》</em></p>
<ul>
<li><strong>磁道（Track）</strong>：当硬盘旋转时，磁头若保持在一个位置上，则每个磁头都会在磁盘表面划出一个圆形轨迹，这些圆形轨迹就叫做磁道；</li>
<li><strong>柱面（Cylinder）</strong>：在有多个盘片构成的盘组中，由不同盘片的面，但处于同一半径圆的多个磁道组成的一个圆柱面；</li>
<li><strong>扇区（Sector）</strong>：磁盘上的每个磁道被等分为若干个弧段，这些弧段便是硬盘的扇区（Sector）。硬盘的第一个扇区，叫做<a href="https://en.wikipedia.org/wiki/Boot_sector">引导扇区</a>；</li>
</ul>
<h2 id="硬盘性能的度量">硬盘性能的度量</h2>
<p>硬盘常规的一次 I/O 需要 3 步，每一步都有相关的延迟，可以将 I/O 访问时间（access time）表示为 3 部分之和：</p>
<ul>
<li>寻道时间（seek time）：将读写磁头组合定位在访问块所在磁道的柱面上所需要的时间</li>
<li>旋转延迟（rotational latency）：等待访问块的第一个扇区旋转到磁头下的时间；</li>
<li>传输时间（transfer time）：完成数据传输需要的时间，取决于硬盘数据传输率；</li>
</ul>
<p>为了更好理解寻道时间和旋转延迟，可以参考下图：</p>
<p><img loading="lazy" src="/media/images/20201126-disk/access_time.png" alt="access_time"  />
</p>
<p>值得一提的是，硬盘的趋势是传输速率相当快，因为硬盘制造商擅长将更多位填塞到同一表面。但驱动器的机械方面与寻道相关（传动手臂速度和旋转速度），改善相当缓慢<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>。因此，为了摊销 I/O 成本，<strong>必须在寻道之间传输尽可能多的数据</strong>。</p>
<h2 id="操作系统中的硬盘">操作系统中的硬盘</h2>
<p>就像进程是 CPU 的抽象、地址空间是内存的抽象一样，存储在操作系统的抽象是文件（目录也是一种文件）。</p>
<p>如果算上内核中的文件系统、驱动等，Linux 的存储架构大体如下：</p>
<p><img loading="lazy" src="/media/images/20201126-disk/linux-storage.png" alt="linux-storage"  />
</p>
<p>一个具体的读流程<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>：</p>
<ol>
<li>系统调用 <code>read（）</code> 会触发相应的 VFS（Virtual Filesystem Switch）函数，传递参数有文件描述符和文件偏移量；</li>
<li>VFS 确定请求的数据是否已经在内存缓存中；若数据不在内存中，内核需要通过块设备层从物理设备上读取数据；</li>
<li>通过通用块设备层（Generic Block Layer）在块设备上执行读操作，启动I/O 操作，传输请求的数据；</li>
<li>在通用块设备层之下是 I/O 调度（I/O Scheduler），根据内核的调度策略，将对应的 I/O 插入队列；</li>
<li>最后，块设备驱动（Block Device Driver）通过向磁盘控制器发送相应的命令，执行真正的数据传输；</li>
</ol>
<p>我们从上到下来看一些关键的点。</p>
<h3 id="vfsvirtual-file-systems">VFS（Virtual File Systems）</h3>
<p><img loading="lazy" src="/media/images/20201126-disk/vfs.jpg" alt="vfs"  />
</p>
<p>VFS 为多种不同的文件系统提供一个通用的接口，通常包含四个部分：</p>
<ul>
<li>Superblock：包含关于特定文件系统的信息，例如文件系统中有多少个 Inode 和数据块、Inode 表的开始位置等等；</li>
<li>Inode(Index node)：描述文件的元数据的结构，包括：文件类型（例如，常规文件、目录等）、大小、权限、一些时间信息、分配给它的块数，以及有关其数据块驻留在磁盘上的位置的信息；</li>
<li>Dentry(Directory Entries)：目录。VFS 是以完整的路径名作为参数，需要遍历路径的目录读取 Inode 信息，一般放到内存中；</li>
<li>File：进程打开的文件；</li>
</ul>
<p>这里我们不讨论这些数据结构是如何具体实现的，我们重点关注操作系统如何对读写 I/O 进行优化的，这些优化常常启发人们后续的软件设计。</p>
<h3 id="page-cache">Page Cache</h3>
<blockquote>
<p>Linux 2.2版本之前内核同时有 <code>Page Cache</code> 和 <code>Buffer Cache</code> 两个 cache，到了 2.4 版本后这两个 cache 被合在了一起，现在内核只有 <code>Page Cache</code><sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></p>
</blockquote>
<p>倘若没有任何缓存的情况下：</p>
<ul>
<li>对于打开文件，每次都需要对目录层次结构中的每个级别至少进行两次读取（一次读取相关目录的 inode，并且至少有一次读取其数据）。</li>
<li>我们要创建一个新的文件，至少需的 I/O 有：一次查找空闲的 inode，一次写入 inode 的存储（将其标记为已分配），一次写入新的 inode 本身（初始化它），一次写入目录的数据，一次读写目录的 inode 以便更新它，最后一次写入真正的数据块——<strong>所有这些只是为了创建一个文件！</strong><sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup></li>
</ul>
<p>Page Cache 位于 VFS 和文件系统之间<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>，在内存中保存常用的块，如果所需的页面已经存在，则根本不需要调用文件系统代码。第一次打开可能会产生很多 I/O 来读取目录的 inode 和数据，但是根据局部性原理，大部分时候会命中缓存。</p>
<p>如果写入数据，则首先将其写入 Page Cache，然后作为脏页（dirty pages）进行管理，这些脏页会定期（也会与系统调用 <code>sync</code> 或 <code>fsync</code> 一起）传输到存储设备。这里也常被称为写缓冲（write buffering），主要有以下三个好处：</p>
<ul>
<li>通过延迟写入，将许多小的 I/O 成批写入到磁盘；</li>
<li>通过将一些写入缓存在内存中，系统可以调度后续的 I/O，从而提高性能；</li>
<li>一些写入可以通过拖延来完全避免。例如，如果应用程序创建文件并将其删除，则可以通过延迟写入完全避免写入磁盘。</li>
</ul>
<blockquote>
<p>有些系统（如数据库）不喜欢这种折中，因此，为了避免由于写入缓冲导致的意外数据丢失，它们就强制写入磁盘，通过调用 <code>fsync()</code>，使用绕过缓存的直接 I/O（direct I/O） 接口，或者使用原始磁盘（raw disk）接口完全避免使用文件系统。</p>
</blockquote>
<h3 id="通用块层generic-block-layer">通用块层（Generic Block layer）</h3>
<p><img loading="lazy" src="/media/images/20201126-disk/block-layer.jpg" alt="block-layer"  />
</p>
<p>对于 VFS 来说，块（block）是基本的数据传输单元；但对于块设备（硬盘也是块设备中的一种）来说，扇区是最小寻址单元，块设备无法对比扇区还小的单元进行寻址和操作。通用块设备层（Generic Block Layer）就是这一转换的中间层，也是内核的一个组成部分，它处理系统所有对块设备的请求。有通用块设备层后，内核可以方便地：</p>
<ul>
<li>为所有的块设备管理提供一个抽象视图，隐藏硬件块设备的差异性；</li>
<li>提供不同的 I/O 调度策略，能够优化性能，减少磁头移动次数，减少磁盘擦写次数，延长磁盘寿命；</li>
</ul>
<p>扇区大小是设备的物理属性，一般大小是 512 字节。由于扇区是块设备的最小可寻址单元，所以块不能比扇区还小，只能整数倍于扇区大小，一般是 4K。</p>
<p>但是，在更新磁盘时，驱动器制造商唯一保证的是单个 512 字节的写入是原子的（具体情况参见制造商说明书）。因此，如果发生不合时宜的掉电，则可能只完成部分写入。</p>
<h3 id="块设备驱动层block-device-driver">块设备驱动层（Block Device Driver）</h3>
<p>I/O 调度后的请求会交给相应的设备驱动程序去进行读写，驱动层中的驱动程序对应具体的物理存储设备，向控制器发出具体的指令来读写数据。由于不是做驱动开发，这里不是我们关注的重点。</p>
<h2 id="常见的硬盘-io-优化">常见的硬盘 I/O 优化</h2>
<p>通过上面的分析，我们知道 Linux 一次读写请求到达磁盘的过程，为了降低文件系统的 I/O 成本，Linux 主要：</p>
<ul>
<li>通过缓存来提高读写性能，本质就是减少磁盘寻道次数；</li>
<li>同时根据磁盘顺序读写快、随机读写慢的特点，尽量做追加写；</li>
</ul>
<p>这些设计思想也被许多开源软件广泛采用。</p>
<h3 id="追加写">追加写</h3>
<p>Google BigTable <sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>的论文把 LSM-Tree（Log Structured-Merge Tree）<sup id="fnref:8"><a href="#fn:8" class="footnote-ref" role="doc-noteref">8</a></sup> 这个古老的数据结构带回前沿，基于 LSM-Tree 的存储引擎有：Leveldb、Rocksdb、HBase、Cassandra 等等。不同于传统的 B 树类存储引擎，基于 LSM-Tree 的存储引擎尤其适合写多读少的场景。</p>
<p>当一个写请求到达时，它会被写到 memtable 中，memtable 在内存里维护一个平衡二叉树或者跳表来保持 key 有序（memtable 同时会写 WAL 来备份数据到磁盘，以便崩溃恢复），当 memtable 达到既定规模时，就会转换为 immutable memtable（不可变 memtable，顾名思义，只读的），然后后台进程会将 immutable memtable 压缩成 SSTable(Sorted String Table，即有序的) 写到磁盘。</p>
<p><img loading="lazy" src="/media/images/20201126-disk/leveldb-arch.png" alt="leveldb 的架构图"  />
</p>
<p>存储引擎只做了顺序磁盘读写，因为没有文件被编辑，增加、修改或删除操作都用简单的生成新的文件来存储。旧的文件不会被更新，重复的记录只会通过创建新的纪录来覆盖，这当然也就产生了一些冗余的数据。显然随着数据的不断修改，SSTable 的文件数量会不断的增加，</p>
<p>所以，系统会定期的执行合并（compaction)操作，即把多个 SSTable 归并为一个大的 SSTable，移除重复的更新或者删除纪录，同时也会删除上述的冗余。通过这样的方式减少了文件个数的增长，保证读操作的性能。因为 SSTable 文件都是有序结构的，所以合并操作也是非常高效的。</p>
<p>当然 LSM-Tree 实现还有很多具体的细节，例如：快照、SSTable 索引、如何组织合并后的 SSTable 等内容，这里我们暂且不表，后面我们会专注于分析 LSM-Tree 的具体实现（leveldb、rocksdb）。</p>
<p>总之，LSM-Tree 充分利用了<strong>内存随机读写 + 顺序落盘 + 定期归并</strong>来获取最大性能。</p>
<h3 id="较大的文件">较大的文件</h3>
<p>硬盘最适合顺序的大文件 I/O 读写，在硬盘上分散的多个小文件会损害性能；同时，元数据过多也会带来很多 I/O 开销（请求很多次 inode）影响性能，所以我们尽量：</p>
<ul>
<li>将小文件合并为大文件</li>
<li>优化元数据存储和管理</li>
</ul>
<p>Google File System<sup id="fnref:9"><a href="#fn:9" class="footnote-ref" role="doc-noteref">9</a></sup> 和 Facebook Haystack<sup id="fnref:10"><a href="#fn:10" class="footnote-ref" role="doc-noteref">10</a></sup> 是两个典型的案例：</p>
<ul>
<li>GFS 选择了当时看来相当大的 64M 作为数据存储的基本单位，就是为了减少大量元数据；</li>
<li>Facebook Haystack 同样将小文件集合成大文件来减少了元数据数目；同时精简元数据，去掉一切 Facebook 场景中不需要的元数据，压缩元信息到足够小并全部加载到内存中，避免请求 inode 带来的开销。</li>
</ul>
<h2 id="reference">Reference</h2>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://en.wikipedia.org/wiki/Disk_storage">https://en.wikipedia.org/wiki/Disk_storage</a>&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>“<a href="https://people.eecs.berkeley.edu/~pattrsn/talks/sigmod98-keynote-color.pdf">Hardware Technology Trends and Database Opportunities</a>” David A.PattersonKeynote Lecture at the ACM SIGMOD Conference (SIGMOD ’98) June, 1998&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p><a href="https://www.ilinuxkernel.com/files/Linux.Generic.Block.Layer.pdf">https://www.ilinuxkernel.com/files/Linux.Generic.Block.Layer.pdf</a>&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p><a href="https://books.google.de/books?id=lZpW6xmXrzoC&amp;pg=PA348&amp;dq=linux+buffer+cache+page+cache&amp;cd=1#v=onepage&amp;q=linux%20buffer%20cache%20page%20cache&amp;f=false">https://books.google.de/books?id=lZpW6xmXrzoC&amp;pg=PA348&amp;dq=linux+buffer+cache+page+cache&amp;cd=1#v=onepage&amp;q=linux%20buffer%20cache%20page%20cache&amp;f=false</a>&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>&ldquo;<a href="http://pages.cs.wisc.edu/~remzi/OSTEP/file-implementation.pdf">Operating Systems: Three Easy Pieces</a>&rdquo; Peter Reiher&#160;<a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6" role="doc-endnote">
<p>&ldquo;<a href="https://lwn.net/Articles/712467/">The future of the page cache</a>&rdquo;&#160;<a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7" role="doc-endnote">
<p>&ldquo;<a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/bigtable-osdi06.pdf">Bigtable:A distributed storage system for structured data</a>&rdquo; Chang F;Dean J;Ghemawat S;Hsieh WC,Wallach DA,Burrows M,Chandra T,Fikes A,Gruber RE, 2006&#160;<a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:8" role="doc-endnote">
<p>Patrick O&rsquo;Neil, Edward Cheng, Dieter Gawlick, and Elizabeth O&rsquo;Neil, <a href="https://www.cs.umb.edu/~poneil/lsmtree.pdf">The Log-Structured Merge-Tree</a>. Acta Informatica 33, June 1996.&#160;<a href="#fnref:8" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:9" role="doc-endnote">
<p>Ghemawat, S., Gobioff, H., and Leung, S.-T. 2003. <a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/gfs-sosp2003.pdf">The Google file system</a> In 19th Symposium on Operating Systems Principles. Lake George, NY. 29-43.&#160;<a href="#fnref:9" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:10" role="doc-endnote">
<p>Beaver D, Kumar S, Li HC, Sobel J, Vajgel P et al (2010) Finding a needle in <a href="https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf">haystack: facebook’s photo storage</a>. In OSDI, vol 10. pp 1–8&#160;<a href="#fnref:10" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
